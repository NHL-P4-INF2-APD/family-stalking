name: Android Production CI/CD

on:
  push:
    branches: [main]
    tags:
      - "v*"

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Accept Android SDK licenses
        run: yes | sdkmanager --licenses >/dev/null

      - name: Install required Android SDK components
        run: |
          sdkmanager "platform-tools" "build-tools;34.0.0" "build-tools;33.0.1"

      - name: Create local.properties
        run: |
          echo "sdk.dir=$ANDROID_HOME" > local.properties
          echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> local.properties
          echo "SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}" >> local.properties

      - name: Run Tests with Coverage
        run: ./gradlew coverage

      - name: Upload Test Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: app/build/reports/tests/
          if-no-files-found: warn

      - name: Upload Coverage Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            app/build/reports/jacoco/coverage/
          if-no-files-found: warn

  auto-tag:
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.generate_version.outputs.new_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: get_latest_tag
        run: |
          # Get the latest tag, default to v1.0.0 if none exists
          git fetch --tags
          latest_tag=$(git tag --sort=-v:refname | head -n 1)
          if [ -z "$latest_tag" ]; then
            latest_tag="v1.0.0"
          fi
          echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT

      - name: Generate new version
        id: generate_version
        run: |
          latest_tag=${{ steps.get_latest_tag.outputs.latest_tag }}
          # Remove 'v' prefix
          version=${latest_tag#v}
          # Split into major, minor, patch
          IFS='.' read -r major minor patch <<< "$version"
          # Increment patch version
          if [ -z "$patch" ]; then
            new_version="v1.0.1"
          else
            new_patch=$((patch + 1))
            new_version="v$major.$minor.$new_patch"
          fi
          echo "new_version=$new_version" >> $GITHUB_OUTPUT

      - name: Create and push new tag
        run: |
          new_version=${{ steps.generate_version.outputs.new_version }}
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag $new_version
          git push origin $new_version

  build-and-release:
    needs: [test, auto-tag]
    if: always() && needs.test.result == 'success' && (needs.auto-tag.result == 'success' || startsWith(github.ref, 'refs/tags/'))
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for release notes generation

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Accept Android SDK licenses
        run: yes | sdkmanager --licenses >/dev/null

      - name: Install required Android SDK components
        run: |
          sdkmanager "platform-tools" "build-tools;34.0.0" "build-tools;33.0.1" "build-tools;29.0.3"

      - name: Create local.properties
        run: |
          echo "sdk.dir=$ANDROID_HOME" > local.properties
          echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> local.properties
          echo "SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}" >> local.properties

      - name: Build Release APK
        run: ./gradlew assembleRelease

      - name: Sign APK
        uses: r0adkll/sign-android-release@v1
        with:
          releaseDirectory: app/build/outputs/apk/release
          signingKeyBase64: ${{ secrets.SIGNING_KEY }}
          alias: ${{ secrets.KEY_ALIAS }}
          keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
          keyPassword: ${{ secrets.KEY_PASSWORD }}

      - name: Upload Release APK
        uses: actions/upload-artifact@v4
        with:
          name: release-apk
          path: app/build/outputs/apk/release/*.apk
          if-no-files-found: error

      - name: Create GitHub Release
        if: needs.auto-tag.result == 'success' || startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: app/build/outputs/apk/release/*.apk
          generate_release_notes: true
          draft: false
          prerelease: false
          tag_name: ${{ needs.auto-tag.outputs.new_version || github.ref_name }}
